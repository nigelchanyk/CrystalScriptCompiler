import crystalscriptcompiler.syntaxtree.*;
import crystalscriptcompiler.syntaxtree.classes.*;
import crystalscriptcompiler.syntaxtree.expressions.*;
import crystalscriptcompiler.syntaxtree.expressions.basic.*;
import crystalscriptcompiler.syntaxtree.expressions.primary.*;
import crystalscriptcompiler.syntaxtree.expressions.primary.instantiations.*;
import crystalscriptcompiler.syntaxtree.expressions.primary.literals.*;
import crystalscriptcompiler.syntaxtree.expressions.primary.methodinvocation.*;
import crystalscriptcompiler.syntaxtree.fields.*;
import crystalscriptcompiler.syntaxtree.imports.*;
import crystalscriptcompiler.syntaxtree.interfaces.*;
import crystalscriptcompiler.syntaxtree.methods.*;
import crystalscriptcompiler.syntaxtree.names.*;
import crystalscriptcompiler.syntaxtree.statements.*;
import crystalscriptcompiler.syntaxtree.statements.conditional.*;
import crystalscriptcompiler.syntaxtree.statements.exceptions.*;
import crystalscriptcompiler.syntaxtree.statements.forloops.*;
import crystalscriptcompiler.syntaxtree.statements.switches.*;
import crystalscriptcompiler.syntaxtree.types.*;
import crystalscriptcompiler.syntaxtree.variables.*;
import crystalscriptcompiler.syntaxtree.variables.initializers.*;
import java_cup.runtime.*;

parser code  {:

	private ParseTreeRoot root;
	
	public ParseTreeRoot getRoot() {
		return root;
	}

	public void setRoot(ParseTreeRoot root) {
		this.root = root;
	}

  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) {
	  java_cup.runtime.Symbol sym = (java_cup.runtime.Symbol)info;
	  m.append( "At line " + sym.left + " character " + sym.right);
      m.append( "("+info.toString()+")" );
	}
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

terminal ARRAY, BOOLEAN, NUMBER, OBJECT, STRING, VAR; // types
terminal LBRACK, RBRACK; // array_type
terminal DOT; // qualified_name
terminal SEMICOLON, MULT, COMMA, EQ, LPAREN, RPAREN, COLON;
terminal IMPORT; // import_declaration
terminal AS;
terminal PUBLIC, PROTECTED, PRIVATE; // modifier
terminal STATIC; // modifier
terminal ABSTRACT;
terminal CLASS; // class_declaration
terminal EXTENDS; // super
terminal THEN;
terminal END;
terminal IMPLEMENTS; // interfaces
terminal DEF; // method_declaration
terminal THIS, SUPER; // explicit_constructor_invocation
terminal INTERFACE; // interface_declaration
terminal IF, ELSE, ELSEIF; // if_then_statement, full_if_statement
terminal SWITCH; // switch_statement
terminal CASE, DEFAULT; // switch_label
terminal DO, WHILE; // while_statement, do_statement
terminal OVERRIDE;
terminal FOR; // for_statement
terminal BREAK; // break_statement
terminal CONTINUE; // continue_statement
terminal RETURN; // return_statement
terminal THROW; // throw_statement
terminal TRY; // try_statement
terminal CATCH; // catch_clause
terminal FINALLY; // finally
terminal NEW; // class_instance_creation_expression
terminal PLUSPLUS; // postincrement_expression
terminal MINUSMINUS; // postdecrement_expression
terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal LSHIFT, RSHIFT, URSHIFT; // shift_expression
terminal LT, GT, LTEQ, GTEQ, IS, ISNT; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression
terminal AND; // and_expression
terminal XOR; // exclusive_or_expression
terminal OR;  // inclusive_or_expression
terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression
terminal QUESTION; // conditional_expression
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ; // assignment_operator
terminal LSHIFTEQ, RSHIFTEQ, URSHIFTEQ; // assignment_operator
terminal ANDEQ, XOREQ, OREQ; // assignment_operator
terminal PASS;

terminal NUMBER_LITERAL;
terminal BOOLEAN_LITERAL;
terminal STRING_LITERAL;
terminal NULL_LITERAL;
terminal UNDEFINED_LITERAL;
terminal IDENTIFIER;

terminal NEWLINE, ENDOFFILE; // new line

// 1. Terminator
non terminal terminators, terminators_opt, terminator;
non terminal comma_multiline, colon_multiline, semicolon_multiline, question_multiline, lbrack_multiline, rbrack_multiline, lparen_multiline, rparen_multiline;
// 19.2) The Syntactic Grammar
non terminal goal;
non terminal top_level_sections_opt, top_level_sections, top_level_section;
// 19.3) Lexical Structure
non terminal literal;
// 19.4) Types, Values, and Variables
non terminal type, primitive_type;
non terminal reference_type;
non terminal class_or_interface_type;
non terminal class_type, interface_type;
// 19.5) Names
non terminal name, qualified_name;
// 19.6) Packages
non terminal import_declarations_opt, import_declarations;
non terminal import_declaration, simple_import_declaration, import_declaration_with_alias;
// 19.7) Productions used only in the LALR(1) grammar
non terminal modifiers_opt, modifiers, modifier;
// 19.8.1) Class Declaration
non terminal class_declaration, super_cl, super_opt;
non terminal interfaces, interfaces_opt, interface_type_list;
non terminal class_body_declarations, class_body_declarations_opt;
non terminal class_body_declaration, class_member_declaration;
// 19.8.2) Field Declarations
non terminal field_declaration, variable_declarators, variable_declarator;
non terminal variable_declarator_id, variable_initializer;
// 19.8.3) Method Declarations
non terminal method_declaration, method_header, method_declarator;
non terminal formal_parameter_list_opt, formal_parameter_list;
non terminal formal_parameter;
// 19.8.5) Constructor Declarations
non terminal constructor_declaration, constructor_declarator;
non terminal explicit_constructor_invocation_opt, explicit_constructor_invocation;
// 19.9.1) Interface Declarations
non terminal interface_declaration;
non terminal extends_interfaces_opt, extends_interfaces;
non terminal interface_member_declarations_opt, interface_member_declarations;
non terminal interface_member_declaration, constant_declaration;
non terminal abstract_method_declaration;
// 19.10) Arrays
non terminal array_initializer;
non terminal variable_initializers;
// 19.11) Blocks and Statements
non terminal block_statements_opt, block_statements, block_statement;
non terminal local_variable_declaration_statement, local_variable_declaration;
non terminal statement;
non terminal statement_without_trailing_substatement;
non terminal empty_statement;
non terminal labeled_statement;
non terminal expression_statement, statement_expression;
non terminal if_then_statement;
non terminal else_if_statements_opt, else_if_statements, else_if_statement;
non terminal else_statement_opt, else_statement;
non terminal full_if_statement;
non terminal switch_statement;
non terminal switch_block_statement_groups_opt;
non terminal switch_block_statement_groups;
non terminal switch_block_statement_group;
non terminal switch_case_header;
non terminal switch_labels, switch_label;
non terminal while_statement;
non terminal do_statement;
non terminal for_statement;
non terminal for_init_opt, for_init;
non terminal for_update_opt, for_update;
non terminal statement_expression_list;
non terminal break_statement, continue_statement;
non terminal return_statement, throw_statement;
non terminal try_statement;
non terminal catches, catch_clause;
non terminal finally;
// 19.12) Expressions
non terminal primary, primary_no_new_array;
non terminal class_instance_creation_expression;
non terminal argument_list_opt, argument_list;
non terminal array_creation_expression, object_creation_expression;
non terminal field_access, method_invocation, array_access;
non terminal postfix_expression;
non terminal postincrement_expression, postdecrement_expression;
non terminal unary_expression, unary_expression_not_plus_minus;
non terminal preincrement_expression, predecrement_expression;
non terminal multiplicative_expression, additive_expression;
non terminal shift_expression, relational_expression, equality_expression;
non terminal and_expression, exclusive_or_expression, inclusive_or_expression;
non terminal conditional_and_expression, conditional_or_expression;
non terminal conditional_expression, assignment_expression;
non terminal assignment;
non terminal left_hand_side;
non terminal assignment_operator;
non terminal expression_opt, expression;
non terminal constant_expression;

precedence left NEWLINE, ENDOFFILE;
precedence right PLUSPLUS, MINUSMINUS;
precedence right NEW, SUPER, THIS;
precedence right NUMBER_LITERAL, BOOLEAN_LITERAL, STRING_LITERAL, NULL_LITERAL, UNDEFINED_LITERAL, IDENTIFIER;

start with goal;

terminators_opt ::=
	| terminators
	;

terminators ::= terminator
	| terminator terminators
	;

terminator ::= NEWLINE | ENDOFFILE;

semicolon_multiline ::= SEMICOLON terminators_opt;
comma_multiline ::= COMMA terminators_opt;
colon_multiline ::= COLON terminators_opt;
lbrack_multiline ::= LBRACK terminators_opt;
rbrack_multiline ::= terminators_opt RBRACK;
lparen_multiline ::= LPAREN terminators_opt;
rparen_multiline ::= terminators_opt RPAREN;
question_multiline ::= QUESTION terminators_opt;

// 19.2) The Syntactic Grammar
goal ::= import_declarations_opt:i top_level_sections_opt:t
	{: parser.setRoot(new ParseTreeRoot((ImportDeclarations)i, (TopLevelSections)t)); :}
	;
top_level_sections_opt ::= {: RESULT = new TopLevelSections(); :}
	| top_level_sections:t {: RESULT = t; :}
	;
top_level_sections ::= top_level_section:t terminators {: RESULT = new TopLevelSections((TopLevelSection)t); :}
	| top_level_section:t terminators top_level_sections:u {: RESULT = new TopLevelSections((TopLevelSection)t, (TopLevelSections)u); :}
	;
top_level_section ::= class_declaration:c {: RESULT = new TopLevelSection((ClassDeclaration)c); :}
	|	interface_declaration:i {: RESULT = new TopLevelSection((InterfaceDeclaration)i); :}
	;

// 19.3) Lexical Structure.
literal ::=	NUMBER_LITERAL:n {: RESULT = new NumberLiteral((Double)n); :}
	|	BOOLEAN_LITERAL:b {: RESULT = new BooleanLiteral((Boolean)b); :}
	|	STRING_LITERAL:s {: RESULT = new StringLiteral((String)s); :}
	|	NULL_LITERAL {: RESULT = new NullLiteral(); :}
	|	UNDEFINED_LITERAL {: RESULT = new UndefinedLiteral(); :}
	;

// 19.4) Types, Values, and Variables
type	::=	primitive_type:p {: RESULT = p; :}
	|	reference_type:r {: RESULT = r; :}
	|	VAR {: RESULT = new VarType(); :}
	;
primitive_type ::= NUMBER {: RESULT = new PrimitiveType(PrimitiveType.Kind.NUMBER); :}
	|	STRING {: RESULT = new PrimitiveType(PrimitiveType.Kind.STRING); :}
	|	BOOLEAN {: RESULT = new PrimitiveType(PrimitiveType.Kind.BOOLEAN); :}
	|	OBJECT {: RESULT = new PrimitiveType(PrimitiveType.Kind.OBJECT); :}
	|	ARRAY {: RESULT = new PrimitiveType(PrimitiveType.Kind.ARRAY); :}
	;
reference_type ::=
		class_or_interface_type:t {: RESULT = t; :}
	;
	
class_or_interface_type ::= name:n {: RESULT = new ClassOrInterfaceType((Name)n); :}
	;
class_type ::=	class_or_interface_type:t {: RESULT = t; :}
	;
interface_type ::= class_or_interface_type:t {: RESULT = t; :}
	;

// 19.5) Names
name ::= IDENTIFIER:i {: RESULT = new Name((String)i); :}
	|	qualified_name:q {: RESULT = q; :}
	;
qualified_name ::=
		name:n DOT IDENTIFIER:i {: RESULT = new QualifiedName((Name)n, (String)i); :}
	;

// 19.6) Packages
import_declarations_opt ::= {: RESULT = new ImportDeclarations(); :}
	| import_declarations:i {: RESULT = i; :}
	;
import_declarations ::= 
		import_declaration:i terminators {: RESULT = new ImportDeclarations((ImportDeclaration)i); :}
	|	import_declaration:j terminators import_declarations:i {: RESULT = new ImportDeclarations((ImportDeclaration)i, (ImportDeclarations)j); :}
	;
import_declaration ::= 
		simple_import_declaration:i {: RESULT = i; :}
	|	import_declaration_with_alias:i {: RESULT = i; :}
	;
simple_import_declaration ::= 
		IMPORT name:n {: RESULT = new ImportDeclaration((Name)n); :}
	;
import_declaration_with_alias ::=
		IMPORT name:n AS IDENTIFIER:i {: RESULT = new ImportDeclaration((Name)n, (String)i); :}
	;

// 19.7) Productions used only in the LALR(1) grammar
modifiers_opt ::= {: RESULT = new Modifiers(); :}
	|	modifiers:m {: RESULT = m; :}
	;
modifiers ::= modifier:m {: RESULT = new Modifiers((Modifier)m); :}
	|	modifier:m modifiers:n {: RESULT = new Modifiers((Modifier)m, (Modifiers)n); :}
	;
modifier ::= PUBLIC {: RESULT = new Modifier(Modifier.Kind.PUBLIC); :}
	| PROTECTED {: RESULT = new Modifier(Modifier.Kind.PROTECTED); :}
	| PRIVATE {: RESULT = new Modifier(Modifier.Kind.PRIVATE); :}
	| STATIC {: RESULT = new Modifier(Modifier.Kind.STATIC); :}
	| ABSTRACT {: RESULT = new Modifier(Modifier.Kind.ABSTRACT); :}
	;

// 19.8) Classes

// 19.8.1) Class Declaration:
class_declaration ::= 
	modifiers_opt:m CLASS IDENTIFIER:n super_opt:s interfaces_opt:i terminators class_body_declarations_opt:b END CLASS
	{: RESULT = new ClassDeclaration((Modifiers)m, (String)n, (SuperclassOptional)s, (Interfaces)i, (MemberDeclarations)b); :}
	;
super_cl ::=	EXTENDS class_type:t {: RESULT = t; :}
	;
super_opt ::=	{: RESULT = new SuperclassOptional(); :}
	|	super_cl:s {: RESULT = new SuperclassOptional((ClassOrInterfaceType)s); :}
	;
interfaces ::=	IMPLEMENTS interface_type_list:i {: RESULT = i; :}
	;
interfaces_opt::= {: RESULT = new Interfaces(); :}
	|	interfaces:i {: RESULT = i; :}
	;
interface_type_list ::= 
		interface_type:t {: RESULT = new Interfaces((ClassOrInterfaceType)t); :}
	|	interface_type:t comma_multiline interface_type_list:u {: RESULT = new Interfaces((ClassOrInterfaceType)t, (Interfaces)u); :}
	;
class_body_declarations_opt ::= {: RESULT = new MemberDeclarations(); :}
	|	class_body_declarations:b {: RESULT = b; :}
	;
class_body_declarations ::= 
		class_body_declaration:b terminators {: RESULT = new MemberDeclarations((MemberDeclaration)b); :}
	|	class_body_declarations:c terminators class_body_declaration:b {: RESULT = new ClassBodyDeclarations((MemberDeclaration)b, (MemberDeclarations)c); :}
	;
class_body_declaration ::=
	class_member_declaration:m {: RESULT = m; :}
	|	constructor_declaration:c {: RESULT = c; :}
	;
class_member_declaration ::=
		field_declaration:f {: RESULT = f; :}
	|	method_declaration:m {: RESULT = m; :}
	|	class_declaration:c {: RESULT = c; :}
	|	interface_declaration:i {: RESULT = i; :}
	;

// 19.8.2) Field Declarations
field_declaration ::= 
		modifiers_opt:m type:t variable_declarators:d {: RESULT = new FieldDeclaration((Modifiers)m, (Type)t, (VariableDeclarator)d); :}
	;
variable_declarators ::=
		variable_declarator:d {: RESULT = new VariableDeclarators((VariableDeclarator)d); :}
	|	variable_declarator:d COMMA variable_declarators:e {: RESULT = new VariableDeclarators((VariableDeclarator)d, (VariableDeclarators)e); :}
	;
variable_declarator ::=
		variable_declarator_id:v {: RESULT = new VariableDeclarator((String)v); :}
	|	variable_declarator_id:v EQ variable_initializer:i {: RESULT = new VairableDeclarator((String)v, (VariableInitializer)i); :}
	;
variable_declarator_id ::=
		IDENTIFIER:i {: RESULT = i; :}
	;
variable_initializer ::=
		expression:e {: RESULT = new VariableInitializer((Expression)e); :}
	|	array_initializer:i {: RESULT = i; :}
	;

// 19.8.3) Method Declarations
method_declaration ::=
		method_header:h terminators block_statements_opt:b terminators END DEF {: RESULT = new MethodDeclaration((MethodHeader)h, (BlockStatements)b); :}
	;
method_header ::=
		modifiers_opt:m type:t method_declarator:d {: RESULT = new MethodHeader((Modifiers)m, (MethodDeclarator)d, (Type)t); :}
	|	modifiers_opt:m DEF method_declarator:d {: RESULT = new MethodHeader((Modifiers)m, (MethodDeclarator)d); :}
	;
method_declarator ::=
		IDENTIFIER:i lparen_multiline formal_parameter_list_opt:p rparen_multiline {: RESULT = new MethodDeclarator((String)i, (Parameters)p); :}
	;
formal_parameter_list_opt ::= {: RESULT = new Parameters(); :}
	|	formal_parameter_list:p {: RESULT = p; :}
	;
formal_parameter_list ::=
		formal_parameter:p {: RESULT = new Parameters((Parameter)p); :}
	|	formal_parameter:p comma_multiline formal_parameter_list:q {: RESULT = new Parameters((Parameter)p, (Parameters)q); :}
	;
formal_parameter ::=
		type:t variable_declarator_id:v {: RESULT = new Parameter((VariableDeclarator)v, (Type)t); :}
	|	type:t variable_declarator_id:v EQ constant_expression:c {: RESULT = new Parameter((VariableDeclarator)v, (Type)t, (ConstantExpression)c); :}
	|	variable_declarator_id:v {: RESULT = new Parameter((VariableDeclarator)v); :}
	|	variable_declarator_id:v EQ constant_expression:c {: RESULT = new Parameter((VariableDeclarator)v, (ConstantExpression)c); :}
	;

// 19.8.5) Constructor Declarations
constructor_declaration ::=
		modifiers_opt:m constructor_declarator:d terminators block_statements_opt:b terminators END DEF
		{: RESULT = new ConstructorDeclaration((Modifiers)m, (ConstructorDeclarator)d, (BlockStatements)b); :}
	;
constructor_declarator ::=
		IDENTIFIER:i lparen_multiline formal_parameter_list_opt:p rparen_multiline explicit_constructor_invocation_opt:e
		{: RESULT = new ConstructorDeclarator((String)i, (Parameters)p, (ConstructorInvocationOptional)e); :}
	;
explicit_constructor_invocation_opt ::= {: RESULT = new ConstructorInvocationOptional(); :}
	|	colon_multiline explicit_constructor_invocation:e {: RESULT = new ConstructorInvocationOptional((ConstructorInvocation)e); :}
	;

explicit_constructor_invocation ::=
		THIS lparen_multiline argument_list_opt:a rparen_multiline terminators
		{: RESULT = new ConstructorInvocation(ConstructorInvocation.Kind.THIS, (ArgumentList)a); :}
	|	SUPER lparen_multiline argument_list_opt:a rparen_multiline terminators
		{: RESULT = new ConstructorInvocation(ConstructorInvocation.Kind.SUPER, (ArgumentList)a); :}
	;

// 19.9) Interfaces

// 19.9.1) Interface Declarations
interface_declaration ::=
		modifiers_opt:m INTERFACE IDENTIFIER:i extends_interfaces_opt:e terminators interface_member_declarations_opt:b terminators END INTERFACE
		{: RESULT = new InterfaceDeclaration((Modifiers)m, (String)i, (Interfaces)e, (MemberDeclarations)b; :}
	;
extends_interfaces_opt ::= {: RESULT = new Interfaces(); :}
	|	EXTENDS extends_interfaces:i {: RESULT = i; :}
	;
extends_interfaces ::=
		interface_type:i {: RESULT = new Interfaces((Interface)i); :}
	|	interface_type:i comma_multiline extends_interfaces:j {: RESULT = new Interfaces((Interface)i, (Interfaces)j); :}
	;
interface_member_declarations_opt ::= {: RESULT = new MemberDeclarations(); :}
	|	interface_member_declarations:d {: RESULT = d; :}
	;
interface_member_declarations ::=
		interface_member_declaration:m terminators {: RESULT = new MemberDeclarations((MemberDeclaration)m); :}
	|	interface_member_declaration:m terminators interface_member_declarations:n {: RESULT = new MemberDeclarations((MemberDeclaration)m, (MemberDeclarations)n); :}
	;
interface_member_declaration ::=
		constant_declaration:c {: RESULT = c; :}
	|	abstract_method_declaration:a {: RESULT = a; :}
	|	class_declaration:c {: RESULT = c; :}
	|	interface_declaration:i {: RESULT = i; :}
	;
constant_declaration ::=
		field_declaration:f {: RESULT = new ConstantDeclaration((FieldDeclaration)f); :}
	;
abstract_method_declaration ::=
		method_header:h {: RESULT = new AbstractMethodDeclaration((MethodHeader)h); :}
	;

// 19.10) Arrays
array_initializer ::=
		lbrack_multiline variable_initializers:i comma_multiline rbrack_multiline {: RESULT = new ArrayInitializer((VariableInitializers)i); :}
	|	lbrack_multiline variable_initializers:i rbrack_multiline {: RESULT = new ArrayInitializer((VariableInitializers)i); :}
	|	lbrack_multiline comma_multiline rbrack_multiline {: RESULT = new ArrayInitializer(); :}
	|	lbrack_multiline rbrack_multiline {: RESULT = new ArrayInitializer(); :}
	;
variable_initializers ::=
		variable_initializer:i {: RESULT = new VariableInitializers((VariableInitializer)i); :}
	|	variable_initializers:j comma_multiline variable_initializer:i {: RESULT = new VariableInitializers((VariableInitializer)i, (VariableInitializers)j); :}
	;

// 19.11) Blocks and Statements
block_statements_opt ::= {: RESULT = new BlockStatements(); :}
	|	block_statements:s {: RESULT = s; :}
	;
block_statements ::=
		block_statement:b terminators {: RESULT = new BlockStatements((BlockStatement)b); :}
	|	block_statement:b terminators block_statements:c {: RESULT = new BlockStatements((BlockStatement)b, (BlockStatements)c); :}
	;
block_statement ::=
		local_variable_declaration_statement:d {: RESULT = d; :}
	|	statement:s {: RESULT = s; :}
	|	class_declaration:c {: RESULT = c; :}
	|	interface_declaration:i {: RESULT = i :}
	;
local_variable_declaration_statement ::=
		local_variable_declaration:d {: RESULT = new DeclarationStatement((LocalVariableDeclaration)d); :}
	;
local_variable_declaration ::=
		type:t variable_declarators:d {: RESULT = new LocalVariableDeclaration((Type)t, (VariableDeclarators)d); :}
	;
statement ::=	statement_without_trailing_substatement:s {: RESULT = s; :}
	|	labeled_statement:l {: RESULT = l; :}
	|	if_then_statement:i {: RESULT = i; :}
	|	full_if_statement:i {: RESULT = i; :}
	|	while_statement:w {: RESULT = w; :}
	|	for_statement:f {: RESULT = f; :}
	;
statement_without_trailing_substatement ::=
	empty_statement:e {: RESULT = e; :}
	|	expression_statement:e {: RESULT = e; :}
	|	switch_statement:s {: RESULT = s; :}
	|	do_statement:d {: RESULT = d; :}
	|	break_statement:b {: RESULT = b; :}
	|	continue_statement:c {: RESULT = c; :}
	|	return_statement:r {: RESULT = r; :}
	|	throw_statement:t {: RESULT = t; :}
	|	try_statement:t {: RESULT = t; :}
	;
empty_statement ::=
		PASS {: RESULT = new EmptyStatement(); :}
	;
labeled_statement ::=
		IDENTIFIER:i colon_multiline statement:s {: RESULT = new LabeledStatement((Statement)s); :}
	;
expression_statement ::=
		statement_expression:s {: RESULT = new ExpressionStatement((StatementExpression)s); :}
	;
statement_expression ::=
		assignment:a {: RESULT = a; :}
	|	preincrement_expression:p {: RESULT = p; :}
	|	predecrement_expression:p {: RESULT = p; :}
	|	postincrement_expression:p {: RESULT = p; :}
	|	postdecrement_expression:p {: RESULT = p; :}
	|	method_invocation:m {: RESULT = m; :}
	|	class_instance_creation_expression:c {: RESULT = c; :}
	;
if_then_statement ::=
		IF expression:e THEN statement:s {: RESULT = new IfStatement((Expression)e, (Statement)s); :}
	;
full_if_statement ::=
		IF expression:e terminators block_statements:s terminators else_if_statements_opt:f else_statement_opt:g END IF {: RESULT = new IfStatement((Expression)e, (BlockStatements)s, (ElseIfStatements)f, (ElseStatement)g); :}
	;
else_if_statements_opt ::= {: RESULT = new ElseIfStatement(); :}
	| else_if_statements:s {: RESULT = s; :}
	;
else_if_statements ::=
		else_if_statement:s terminators {: RESULT = new ElseIfStatements((ElseIfStatement)s); :}
	|	else_if_statement:s terminators else_if_statements:t {: RESULT = new ElseIfStatements((ElseIfStatement)s, (ElseIfStatements)t); :}
	;
else_if_statement ::=
		ELSEIF expression:e terminators block_statements:s {: RESULT = new ElseIfStatement((Expression)e, (BlockStatements)s); :}
	;
else_statement_opt ::= {: RESULT = new ElseStatement(); :}
	|	else_statement:e {: RESULT = e; :}
	;
else_statement ::= ELSE terminators block_statements:s {: RESULT = new ElseStatement((BlockStatements)s); :}
	;
switch_statement ::=
		SWITCH expression:e terminators switch_block_statement_groups_opt:g END SWITCH
	;
switch_block_statement_groups_opt ::= {: RESULT = new SwitchGroups(); :}
	|	switch_block_statement_groups:g {: RESULT = g; :}
	;
switch_block_statement_groups ::=
		switch_block_statement_group:g terminators {: RESULT = new SwitchGroups((SwitchGroup)g); :}
	|	switch_block_statement_group:g terminators switch_block_statement_groups:h {: RESULT = new SwitchGroups((SwitchGroup)g, (SwitchGroups)h); :}
	;
switch_block_statement_group ::=
		switch_case_header:h terminators block_statements:s {: RESULT = new SwitchGroup((SwitchHeader)h, (BlockStatements)s); :}
	;
switch_case_header ::=
		CASE switch_labels:l colon_multiline {: RESULT = new SwitchHeader((SwitchLabels)l); :}
	|	DEFAULT colon_multiline {: RESULT = new SwitchHeader(); :}
	;
switch_labels ::=
		switch_label:l {: RESULT = new SwitchLabels((SwitchLabel)l); :}
	|	switch_labels:l comma_multiline switch_label:m {: RESULT = new SwitchLabels((SwitchLabel)m, (SwitchLabels)l); :}
	;
switch_label ::= constant_expression {: RESULT = new SwitchLabel((Expression)e); :}
	;
while_statement ::=
		WHILE expression:e terminators block_statements:s END WHILE {: RESULT = new WhileStatement((Expression)e, (BlockStatements)s); :}
	;
do_statement ::=
		DO terminators block_statements:s END WHILE expression:e {: RESULT = new DoStatement((Expression)e, ((BlockStatements)s); :}
	;
for_statement ::=
		FOR for_init_opt:f semicolon_multiline expression_opt:e semicolon_multiline for_update_opt:u terminators statement
		{: RESULT = new ForStatement((ForInitializer)f, (Expression)e, (StatementExpressionList)u); :}
	;
for_init_opt ::= {: RESULT = new ForInitializer(); :}
	|	for_init:i {: RESULT = i; :}
	;
for_init ::= statement_expression_list:e {: RESULT = new ForInitializer((StatementExpressionList)e); :}
	|	local_variable_declaration:d {: RESULT = new ForInitializer((LocalVariableDeclaration)d); :}
	;
for_update_opt ::= {: RESULT = new StatementExpressionList(); :}
	|	for_update:u {: RESULT = u; :}
	;
for_update ::= statement_expression_list:e {: RESULT = e; :}
	;
statement_expression_list ::=
		statement_expression:e {: RESULT = new StatementExpressionList((StatementExpression)e); :}
	|	statement_expression:e comma_multiline statement_expression_list:f {: RESULT = new StatementExpressionList((StatementExpression)e, (StatementExpressionList)f); :}
	;

break_statement ::=
		BREAK {: RESULT = new BreakStatement(); :}
	|	BREAK IDENTIFIER:i {: RESULT = new BreakStatement((String)i); :}
	;

continue_statement ::=
		CONTINUE {: RESULT = new ContinueStatement(); :}
	|	CONTINUE IDENTIFIER:i {: RESULT = new ContinueStatement((String)i); :}
	;
return_statement ::=
		RETURN {: RESULT = new ReturnStatement(); :}
	|	RETURN expression:e {: RESULT = new ReturnStatement((Expression)e); :}
	;
throw_statement ::=
		THROW expression:e {: RESULT = new ThrowStatement((Expression)e); :}
	;
try_statement ::=
		TRY terminators block_statements:s catches:c END TRY {: RESULT = new TryStatement((BlockStatements)s, (CatchBlocks)c); :}
	|	TRY terminators block_statements:s catches:c terminators_opt finally:f END TRY {: RESULT = new TryStatement((BlockStatements)s, (CatchBlocks)c, (FinallyBlock)f); :}
	|	TRY terminators block_statements:s finally:f END TRY {: RESULT = new TryStatement((BlockStatements)s, (FinallyBlock)f); :}
	;
catches ::=	catch_clause:c {: RESULT = new CatchBlocks((CatchBlock)c); :}
	|	catch_clause catches:d {: RESULT = new CatchBlock((CatchBlock)c, (CatchBlocks)d); :}
	;
catch_clause ::=
		CATCH formal_parameter:p terminators block_statements_opt:b {: RESULT = new CatchBlock((Parameter)p, (BlockStatements)b); :}
	;
finally ::=	FINALLY terminators block_statements {: RESULT = new FinallyBlock((BlockStatements)b); :}
	;

// 19.12) Expressions
primary ::=	primary_no_new_array:p {: RESULT = p; :}
	|	array_creation_expression:c {: RESULT = c; :}
	|	object_creation_expression:c {: RESULT = c; :}
	;
primary_no_new_array ::=
		literal:l {: RESULT = l; :}
	|	THIS {: RESULT = new ThisPrimary(); :}
	|	lparen_multiline expression:e rparen_multiline {: RESULT = e; :}
	|	class_instance_creation_expression:e {: RESULT = e; :}
	|	field_access:a {: RESULT = a; :}
	|	method_invocation:m {: RESULT = m; :}
	|	array_access:a {: RESULT = a; :}
	|	name:n DOT THIS {: RESULT = new ThisPrimary((Name)n); :}
	;
class_instance_creation_expression ::=
		NEW class_type:c lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new ClassInstantiationExpression((ClassOrInterfaceType)t, (ArgumentList)a); :}
	|	NEW class_type:t lparen_multiline argument_list_opt:a rparen_multiline OVERRIDE terminators class_body_declarations_opt:d END OVERRIDE
		{: RESULT = new ClassInstantiationExpression((ClassOrInterfaceType)t, (ArgumentList)a, (ClassBodyDeclarations)d); :}
	;
argument_list_opt ::= {: RESULT = new ArgumentList(); :}
	|	argument_list:a {: RESULT = a; :}
	;
argument_list ::=
		expression:e {: RESULT = new ArgumentList((Expression)e); :}
	|	expression:e comma_multiline argument_list:a {: RESULT = new ArgumentList((Expression)e, (ArgumentList)a); :}
	;
array_creation_expression ::=
		NEW ARRAY lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new ArrayInstantiationExpression((ArgumentList)a); :}
	;
object_creation_expression ::=
		NEW OBJECT lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new ObjectInstantiationExpression((ArgumentList)a); :}
	;
field_access ::=
		SUPER DOT IDENTIFIER:i {: RESULT = new FieldAccess((String)i); :}
	|	name:n DOT SUPER DOT IDENTIFIER:i {: RESULT = new FieldAccess((String)i, (Name)n); :}
	;
method_invocation ::=
		name:n lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new MethodInvocation((Name)n, (ArgumentList)a); :}
	|	primary:p DOT IDENTIFIER:i lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new MethodInvocation((Primary)p, (String)i, (ArgumentList)a); :}
	|	SUPER DOT IDENTIFIER:i lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new SuperMethodInvocation((String)i, (ArgumentList)a); :}
	|	name:n DOT SUPER DOT IDENTIFIER:i lparen_multiline argument_list_opt:a rparen_multiline {: RESULT = new SuperMethodInvocation((Name)n, (String)i, (ArgumentList)a); :}
	;
array_access ::=
		name:n lbrack_multiline expression:e rbrack_multiline {: RESULT = new ArrayAccess((Name)n, (Expression)e); :}
	|	primary_no_new_array:p lbrack_multiline expression:e rbrack_multiline {: RESULT = new ArrayAccess((Primary)p, (Expression)e); :}
	;
postfix_expression ::=
		primary:p {: RESULT = new UnaryExpression((Primary)p); :}
	|	name:n {: RESULT = new UnaryExpression((Name)n); :}
	|	postincrement_expression:p {: RESULT = p; :}
	|	postdecrement_expression:p {: RESULT = p; :}
	;
postincrement_expression ::=
		postfix_expression:p PLUSPLUS {: RESULT = new UnaryExpression((UnaryExpression)p, UnaryExpression.Kind.POSTINCREMENT); :}
	;
postdecrement_expression ::=
		postfix_expression:p MINUSMINUS {: RESULT = new UnaryExpression((UnaryExpression)p, UnaryExpression.Kind.POSTDECREMENT); :}
	;
unary_expression ::=
		preincrement_expression:p {: RESULT = p; :}
	|	predecrement_expression:p {: RESULT = p; :}
	|	PLUS unary_expression:u {: RESULT = new UnaryExpression((UnaryExpression)u, UnaryExpression.Kind.PLUS); :}
	|	MINUS unary_expression:u {: RESULT = new UnaryExpression((UnaryExpression)u, UnaryExpression.Kind.MINUS); :}
	|	unary_expression_not_plus_minus:u {: RESULT = u; :}
	;
preincrement_expression ::=
		PLUSPLUS unary_expression:u {: RESULT = new UnaryExpression((UnaryExpression)u, UnaryExpression.Kind.PREINCREMENT); :}
	;
predecrement_expression ::=
		MINUSMINUS unary_expression:u {: RESULT = new UnaryExpression((UnaryExpression)u, UnaryExpression.Kind.PREDECREMENT); :}
	;
unary_expression_not_plus_minus ::=
		postfix_expression:p {: RESULT = p; :}
	|	COMP unary_expression:c {: RESULT = new UnaryExpression((UnaryExpression)c, UnaryExpression.Kind.COMPLEMENT); :}
	|	NOT unary_expression:n {: RESULT = new UnaryExpression((UnaryExpression)n, UnaryExpression.Kind.NEGATE); :}
	;
multiplicative_expression ::=
		unary_expression:u {: RESULT = u; :}
	|	multiplicative_expression:l MULT terminators_opt unary_expression:r {: RESULT = new ArithmeticExpression((BasicExpression)l, (BasicExpression)r, ArithmeticExpression.Kind.MULTIPLY); :}
	|	multiplicative_expression:l DIV terminators_opt unary_expression:r {: RESULT = new ArithmeticExpression((BasicExpression)l, (BasicExpression)r, ArithmeticExpression.Kind.DIVIDE); :}
	|	multiplicative_expression:l MOD terminators_opt unary_expression:r {: RESULT = new ArithmeticExpression((BasicExpression)l, (BasicExpression)r, ArithmeticExpression.Kind.MODULO); :}
	;
additive_expression ::=
		multiplicative_expression:m {: RESULT = m; :}
	|	additive_expression:a PLUS terminators_opt multiplicative_expression:m {: RESULT = new ArithmeticExpression((BasicExpression)a, (BasicExpression)m, ArithmeticExpression.Kind.ADD); :}
	|	additive_expression:a MINUS terminators_opt multiplicative_expression:m {: RESULT = new ArithmeticExpression((BasicExpression)a, (BasicExpression)m, ArithmeticExpression.Kind.MINUS); :}
	;
shift_expression ::=
		additive_expression:a {: RESULT = a; :}
	|	shift_expression:s LSHIFT terminators_opt additive_expression:a {: RESULT = new ArithmeticExpression((BasicExpression)s, (BasicExpression)a, ArithmeticExpression.Kind.LEFT_SHIFT); :}
	|	shift_expression:s RSHIFT terminators_opt additive_expression:a {: RESULT = new ArithmeticExpression((BasicExpression)s, (BasicExpression)a, ArithmeticExpression.Kind.RIGHT_SHIFT); :}
	|	shift_expression:s URSHIFT terminators_opt additive_expression:a {: RESULT = new ArithmeticExpression((BasicExpression)s, (BasicExpression)a, ArithmeticExpression.Kind.UNSIGNED_RIGHT_SHIFT); :}
	;
relational_expression ::=
		shift_expression:s {: RESULT = s; :}
	|	relational_expression:r LT terminators_opt shift_expression:s {: RESULT = new ComparativeExpression((BasicExpression)r, (BasicExpression)s, ComparativeExpression.Kind.LESS_THAN); :}
	|	relational_expression:r GT terminators_opt shift_expression:s {: RESULT = new ComparativeExpression((BasicExpression)r, (BasicExpression)s, ComparativeExpression.Kind.GREATER_THAN); :}
	|	relational_expression:r LTEQ terminators_opt shift_expression:s {: RESULT = new ComparativeExpression((BasicExpression)r, (BasicExpression)s, ComparativeExpression.Kind.LESS_THAN_EQUAL); :}
	|	relational_expression:r GTEQ terminators_opt shift_expression:s {: RESULT = new ComparativeExpression((BasicExpression)r, (BasicExpression)s, ComparativeExpression.Kind.GREATER_THAN_EQUAL); :}
	;
equality_expression ::=
		relational_expression:r {: RESULT = r; :}
	|	equality_expression:e EQEQ terminators_opt relational_expression:r {: RESULT = new EqualityExpression((BasicExpression)e, (BasicExpression)r, EqualityExpression.Kind.EQUAL); :}
	|	equality_expression:e NOTEQ terminators_opt relational_expression:r {: RESULT = new EqualityExpression((BasicExpression)e, (BasicExpression)r, EqualityExpression.Kind.NOT_EQUAL); :}
	|	equality_expression:r IS terminators_opt relational_expression:s {: RESULT = new EqualityExpression((BasicExpression)r, (BasicExpression)s, EqualityExpression.Kind.IS); :}
	|	equality_expression:r ISNT terminators_opt relational_expression:s {: RESULT = new EqualityExpression((BasicExpression)r, (BasicExpression)s, EqualityExpression.Kind.ISNT); :}
	;
and_expression ::=
		equality_expression:e {: RESULT = e; :}
	|	and_expression:a AND terminators_opt equality_expression:e {: RESULT = new BitwiseExpression((BasicExpression)a, (BasicExpression)e, BitwiseExpression.Kind.AND); :}
	;
exclusive_or_expression ::=
		and_expression:e {: RESULT = e; :}
	|	exclusive_or_expression:e XOR terminators_opt and_expression:a {: RESULT = new BitwiseExpression((BasicExpression)e, (BasicExpression)a, BitwiseExpression.Kind.XOR); :}
	;
inclusive_or_expression ::=
		exclusive_or_expression:e {: RESULT = e; :}
	|	inclusive_or_expression:o OR terminators_opt exclusive_or_expression:e {: RESULT = new BitwiseExpression((BasicExpression)o, (BasicExpression)e, BitwiseExpression.Kind.OR); :}
	;
conditional_and_expression ::=
		inclusive_or_expression:o {: RESULT = o; :}
	|	conditional_and_expression:a ANDAND terminators_opt inclusive_or_expression:o {: RESULT = new BinaryExpression((BasicExpression)a, (BasicExpression)o, BinaryExpression.Kind.AND); :}
	;
conditional_or_expression ::=
		conditional_and_expression:a {: RESULT = a; :}
	|	conditional_or_expression:o OROR terminators_opt conditional_and_expression:a {: RESULT = new BinaryExpression((BasicExpression)o, (BasicExpression)a, BinaryExpression.Kind.OR); :}
	;
conditional_expression ::=
		conditional_or_expression:o {: RESULT = o; :}
	|	conditional_or_expression:o question_multiline expression:e colon_multiline conditional_expression:c
		{: RESULT = new TernaryExpression((BasicExpression)o, (Expression)e, (BasicExpression)c); :}
	;
assignment_expression ::=
		conditional_expression:e {: RESULT = e; :}
	|	assignment:a {: RESULT = a; :}
	;
assignment ::=	left_hand_side:l assignment_operator:o terminators_opt assignment_expression:e {: RESULT = new Assignment((LeftValue)l, (Assignment.Operator)o, (AssignmentExpression)e); :}
	;
left_hand_side ::=
		name:n {: RESULT = n; :}
	|	field_access:f {: RESULT = f; :}
	|	array_access:a {: RESULT = a; :}
	;
assignment_operator ::=
		EQ {: RESULT = Assignment.Operator.EQ; :}
	|	MULTEQ {: RESULT = Assignment.Operator.MULTEQ; :}
	|	DIVEQ {: RESULT = Assignment.Operator.DIVEQ; :}
	|	MODEQ {: RESULT = Assignment.Operator.MODEQ; :}
	|	PLUSEQ {: RESULT = Assignment.Operator.PLUSEQ; :}
	|	MINUSEQ {: RESULT = Assignment.Operator.MINUSEQ; :}
	|	LSHIFTEQ {: RESULT = Assignment.Operator.LSHIFTEQ; :}
	|	RSHIFTEQ {: RESULT = Assignment.Operator.RSHIFTEQ; :}
	|	URSHIFTEQ {: RESULT = Assignment.Operator.URSHIFTEQ; :}
	|	ANDEQ {: RESULT = Assignment.Operator.ANDEQ; :}
	|	XOREQ {: RESULT = Assignment.Operator.XOREQ; :}
	|	OREQ {: RESULT = Assignment.Operator.OREQ; :}
	;
expression_opt ::= {: RESULT = new Expression(); :}
	|	expression:e {: RESULT = e; :}
	;
expression ::=	assignment_expression:a {: RESULT = a; :}
	;
constant_expression ::=
		expression:e {: RESULT = e; :}
	;
